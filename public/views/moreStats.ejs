<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PottyPlanner - More Stats</title>
    <link rel="icon" class="favicon" type="image/x-icon" href="/images/logo.png">
    <link rel="stylesheet" href="/css/stats.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-y: auto;
        overflow-x: hidden;
        font-family: Arial, sans-serif;
    }

    .container {
        padding: 20px;
        position: relative;
        z-index: 1;
    }

    header {
        text-align: center;
        margin-bottom: 30px;
    }

    header .logo img {
        width: 50px;
    }

    header .website-name {
        font-size: 24px;
        font-weight: bold;
    }

    a {
        color: #007BFF;
        text-decoration: none;
        font-weight: bold;
    }

    a:hover {
        color: #0056b3;
    }

    .btn {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #f0f0f0;
        border: 2px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s, transform 0.1s;
        margin: 10px 5px;
        position: relative;
        z-index: 2; /* Ensure buttons are clickable */
    }

    .btn:active {
        transform: scale(0.98);
    }

    .btn.active {
        background-color: #007bff;
        color: white;
        border-color: #0056b3;
    }

    h1, h2, h3 {
        text-align: center;
    }

    .img-container {
        text-align: center;
        margin-bottom: 30px;
        position: relative;
        z-index: 1;
    }

    #durationChart {
        max-width: 600px;
        max-height: 400px;
        margin: 0 auto 30px auto;
        position: relative;
        z-index: 1;
    }

    #datetime {
        text-align: center;
        margin-bottom: 20px;
        font-size: 18px;
    }

    #savedTimes {
        list-style-type: none;
        padding-left: 0;
    }

    #savedTimes li {
        padding: 5px;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        margin-bottom: 5px;
    }

    .error-message {
        color: red;
        text-align: center;
        margin: 10px 0;
    }
</style>

</head>
<body>
    <header>
        <div class="logo">
            <a href="/"><img src="/images/logo.png" alt="Logo"></a>
        </div>
        <div class="website-name">PottyPlanner</div>
        <input type="checkbox" id="active">
        <label for="active" class="menu-btn">
            <img src="/images/ham-menu.svg" alt="Menu Icon">
        </label>
        <div class="wrapper">
            <ul>
                <li><a href="/profiles">Profile</a></li>
                <li><a href="/feedback">Feedback</a></li>
                <li><a href="/">Log out</a></li>
            </ul>
        </div>
    </header>

    <div class="container">
        <section>
            <br><br>
            <center><h1>Student: <span id="studentName"><%= studentName %></span></h1></center>
        </section>

        <section>
            <h3>Session Durations</h3>
            <div class="img-container">
                <canvas id="durationChart"></canvas>
                <p id="errorMessage" class="error-message"></p>
            </div>
        </section>

        <section>
            <h3><a href="/stats">Go back</a></h3>
            <h3>Current Date and Time:</h3>
            <p id="datetime"></p>

            <button class="btn" id="playBtn" onclick="handleButtonClick('play')">Start</button>
            
            <button class="btn" onclick="saveSession()">Save Time</button>

            <ul id="savedTimes"></ul>
        </section>
    </div>

    <script>
        let intervalId = null;
        let startTime = null;
        let chart = null;

        function updateDateTime() {
            const now = new Date();
            document.getElementById('datetime').textContent = now.toLocaleString();
        }

        function startTimer() {
            if (!intervalId && !startTime) { // Only start if not already running and not already started
                startTime = new Date();
                updateDateTime();
                intervalId = setInterval(updateDateTime, 1000);
                console.log("Timer started at", startTime.toLocaleTimeString());
            }
        }

        function pauseClock() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        }

        function saveSession() {
            if (!startTime || !intervalId) { // Only allow save if timer is running
                alert("Please click 'Start' before saving.");
                return;
            }

            const endTime = new Date();
            const durationMs = endTime - startTime;
            const durationMin = Math.floor(durationMs / 60000);
            const durationSec = Math.floor((durationMs % 60000) / 1000);

            const li = document.createElement('li');
            li.textContent = `Start: ${startTime.toLocaleTimeString()} â€“ End: ${endTime.toLocaleTimeString()} | Duration: ${durationMin} min ${durationSec} sec`;
            document.getElementById('savedTimes').appendChild(li);

            const studentName = document.getElementById('studentName').textContent;

            fetch('/timestamp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    data: [studentName, startTime.toISOString(), endTime.toISOString()]
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'saved' || data.status === 'updated') {
                    // Dynamically add new data point to line chart
                    if (chart) {
                        chart.data.labels.push(startTime.toLocaleTimeString());
                        chart.data.datasets[0].data.push(durationMin);
                        chart.update();
                    } else {
                        // If chart hasn't been initialized yet
                        fetchTimestamps(studentName);
                    }
                } else {
                    document.getElementById('errorMessage').textContent = 'Failed to save session.';
                }
            })
            .catch(err => {
                console.error('Error saving timestamp:', err);
                document.getElementById('errorMessage').textContent = 'Error saving session.';
            });

            startTime = null;
            pauseClock();
            document.querySelectorAll('.btn').forEach(btn => btn.classList.remove('active'));
        }


        function handleButtonClick(action) {
            document.querySelectorAll('.btn').forEach(btn => btn.classList.remove('active'));

            if (action == 'play') {
                document.getElementById('playBtn').classList.add('active');
                startTimer();
            } else if (action == 'pause') {
                document.getElementById('pauseBtn').classList.add('active');
                pauseClock();
            }
        }

        function fetchTimestamps(studentName) {
    document.getElementById('errorMessage').textContent = ''; // Clear previous errors
    fetch(`/timestamps/${encodeURIComponent(studentName)}`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                document.getElementById('errorMessage').textContent = data.error;
                return;
            }
            if (data.length === 0) {
                document.getElementById('errorMessage').textContent = 'No sessions recorded yet.';
                if (chart) chart.destroy();
                return;
            }

            const labels = data.map(row => row.startTime);
            const durations = data.map(row => row.duration);

            if (chart) chart.destroy();

            const ctx = document.getElementById('durationChart').getContext('2d');
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Session Duration (Minutes)',
                        data: durations,
                        fill: false,
                        borderColor: 'rgba(0, 123, 255, 1)',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Duration (Minutes)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Start Time'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true
                        }
                    }
                }
            });
        })
        .catch(err => {
            console.error('Error fetching timestamps:', err);
            document.getElementById('errorMessage').textContent = 'Error loading session data.';
        });
}


        function updateStudentName(newName) {
            const studentNameElement = document.getElementById('studentName');
            if (studentNameElement && newName) {
                studentNameElement.textContent = newName;
            }
        }

        window.onload = function () {
            const urlParams = new URLSearchParams(window.location.search);
            let studentName = urlParams.get('studentName') || 'Unknown Student';
            const storedStudents = JSON.parse(localStorage.getItem('students')) || [];
            const student = storedStudents.find(s => s.name === decodeURIComponent(studentName));
            if (student) {
                studentName = student.name;
            }
            studentName = decodeURIComponent(studentName);
            updateStudentName(studentName);
            updateDateTime();
            setInterval(updateDateTime, 1000);
            fetchTimestamps(studentName);
        };
    </script>
</body>
</html>